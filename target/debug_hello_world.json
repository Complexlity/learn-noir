{"debug_symbols":[{"locations":{"0":[{"span":{"start":9280,"end":9309},"file":1},{"span":{"start":88,"end":111},"file":0}],"1":[{"span":{"start":9320,"end":9353},"file":1}],"0.12":[{"span":{"start":114,"end":119},"file":0}],"0.13":[{"span":{"start":114,"end":119},"file":0}],"0.14":[{"span":{"start":694,"end":719},"file":25}],"0.15":[{"span":{"start":694,"end":719},"file":25}],"0.16":[{"span":{"start":694,"end":719},"file":25}],"0.17":[{"span":{"start":694,"end":719},"file":25}],"0.18":[{"span":{"start":694,"end":719},"file":25}],"0.19":[{"span":{"start":694,"end":719},"file":25}],"0.20":[{"span":{"start":694,"end":719},"file":25}],"0.21":[{"span":{"start":694,"end":719},"file":25}],"0.22":[{"span":{"start":694,"end":719},"file":25}],"0.23":[{"span":{"start":694,"end":719},"file":25}],"0.24":[{"span":{"start":694,"end":719},"file":25}],"0.25":[{"span":{"start":694,"end":719},"file":25}],"0.26":[{"span":{"start":694,"end":719},"file":25}],"0.27":[{"span":{"start":694,"end":719},"file":25}],"0.28":[{"span":{"start":694,"end":719},"file":25}],"0.29":[{"span":{"start":694,"end":719},"file":25}],"0.30":[{"span":{"start":694,"end":719},"file":25}],"0.31":[{"span":{"start":694,"end":719},"file":25}],"0.32":[{"span":{"start":694,"end":719},"file":25}],"0.33":[{"span":{"start":694,"end":719},"file":25}],"0.34":[{"span":{"start":694,"end":719},"file":25}],"0.35":[{"span":{"start":694,"end":719},"file":25}],"0.36":[{"span":{"start":694,"end":719},"file":25}],"0.37":[{"span":{"start":694,"end":719},"file":25}],"0.38":[{"span":{"start":694,"end":719},"file":25}],"0.39":[{"span":{"start":694,"end":719},"file":25}],"0.40":[{"span":{"start":694,"end":719},"file":25}],"0.41":[{"span":{"start":694,"end":719},"file":25}],"0.42":[{"span":{"start":694,"end":719},"file":25}],"0.43":[{"span":{"start":694,"end":719},"file":25}],"0.44":[{"span":{"start":694,"end":719},"file":25}],"0.45":[{"span":{"start":694,"end":719},"file":25}],"0.46":[{"span":{"start":694,"end":719},"file":25}],"0.47":[{"span":{"start":694,"end":719},"file":25}],"0.48":[{"span":{"start":694,"end":719},"file":25}],"0.49":[{"span":{"start":694,"end":719},"file":25}],"0.50":[{"span":{"start":694,"end":719},"file":25}],"0.51":[{"span":{"start":694,"end":719},"file":25}],"0.52":[{"span":{"start":694,"end":719},"file":25}],"0.53":[{"span":{"start":694,"end":719},"file":25}],"0.54":[{"span":{"start":694,"end":719},"file":25}],"0.55":[{"span":{"start":694,"end":719},"file":25}],"0.56":[{"span":{"start":694,"end":719},"file":25}],"0.57":[{"span":{"start":694,"end":719},"file":25}],"0.58":[{"span":{"start":694,"end":719},"file":25}],"0.59":[{"span":{"start":694,"end":719},"file":25}],"0.60":[{"span":{"start":694,"end":719},"file":25}],"0.61":[{"span":{"start":694,"end":719},"file":25}],"0.62":[{"span":{"start":694,"end":719},"file":25}],"0.63":[{"span":{"start":694,"end":719},"file":25}],"0.64":[{"span":{"start":694,"end":719},"file":25}],"0.65":[{"span":{"start":694,"end":719},"file":25}],"0.66":[{"span":{"start":694,"end":719},"file":25}],"0.67":[{"span":{"start":694,"end":719},"file":25}],"0.68":[{"span":{"start":694,"end":719},"file":25}],"0.69":[{"span":{"start":694,"end":719},"file":25}],"0.70":[{"span":{"start":694,"end":719},"file":25}],"0.71":[{"span":{"start":694,"end":719},"file":25}],"0.72":[{"span":{"start":694,"end":719},"file":25}],"0.73":[{"span":{"start":694,"end":719},"file":25}],"0.74":[{"span":{"start":694,"end":719},"file":25}],"0.75":[{"span":{"start":694,"end":719},"file":25}],"0.76":[{"span":{"start":694,"end":719},"file":25}],"0.77":[{"span":{"start":694,"end":719},"file":25}],"0.78":[{"span":{"start":694,"end":719},"file":25}],"0.79":[{"span":{"start":694,"end":719},"file":25}],"0.80":[{"span":{"start":694,"end":719},"file":25}],"0.81":[{"span":{"start":694,"end":719},"file":25}],"0.82":[{"span":{"start":694,"end":719},"file":25}],"0.83":[{"span":{"start":694,"end":719},"file":25}],"0.84":[{"span":{"start":694,"end":719},"file":25}],"0.85":[{"span":{"start":694,"end":719},"file":25}],"0.86":[{"span":{"start":694,"end":719},"file":25}],"0.87":[{"span":{"start":694,"end":719},"file":25}],"0.88":[{"span":{"start":694,"end":719},"file":25}],"0.89":[{"span":{"start":694,"end":719},"file":25}],"0.90":[{"span":{"start":694,"end":719},"file":25}],"0.91":[{"span":{"start":694,"end":719},"file":25}],"0.92":[{"span":{"start":694,"end":719},"file":25}],"0.93":[{"span":{"start":694,"end":719},"file":25}],"0.94":[{"span":{"start":694,"end":719},"file":25}],"0.95":[{"span":{"start":694,"end":719},"file":25}],"1.12":[{"span":{"start":9320,"end":9353},"file":1}],"1.13":[{"span":{"start":9320,"end":9353},"file":1}],"1.14":[{"span":{"start":694,"end":719},"file":25}],"1.15":[{"span":{"start":694,"end":719},"file":25}],"1.16":[{"span":{"start":694,"end":719},"file":25}],"1.17":[{"span":{"start":694,"end":719},"file":25}],"1.18":[{"span":{"start":694,"end":719},"file":25}],"1.19":[{"span":{"start":694,"end":719},"file":25}],"1.20":[{"span":{"start":694,"end":719},"file":25}],"1.21":[{"span":{"start":694,"end":719},"file":25}],"1.22":[{"span":{"start":694,"end":719},"file":25}],"1.23":[{"span":{"start":694,"end":719},"file":25}],"1.24":[{"span":{"start":694,"end":719},"file":25}],"1.25":[{"span":{"start":694,"end":719},"file":25}],"1.26":[{"span":{"start":694,"end":719},"file":25}],"1.27":[{"span":{"start":694,"end":719},"file":25}],"1.28":[{"span":{"start":694,"end":719},"file":25}],"1.29":[{"span":{"start":694,"end":719},"file":25}],"1.30":[{"span":{"start":694,"end":719},"file":25}],"1.31":[{"span":{"start":694,"end":719},"file":25}],"1.32":[{"span":{"start":694,"end":719},"file":25}],"1.33":[{"span":{"start":694,"end":719},"file":25}],"1.34":[{"span":{"start":694,"end":719},"file":25}],"1.35":[{"span":{"start":694,"end":719},"file":25}],"1.36":[{"span":{"start":694,"end":719},"file":25}],"1.37":[{"span":{"start":694,"end":719},"file":25}],"1.38":[{"span":{"start":694,"end":719},"file":25}],"1.39":[{"span":{"start":694,"end":719},"file":25}],"1.40":[{"span":{"start":694,"end":719},"file":25}],"1.41":[{"span":{"start":694,"end":719},"file":25}],"1.42":[{"span":{"start":694,"end":719},"file":25}],"1.43":[{"span":{"start":694,"end":719},"file":25}],"1.44":[{"span":{"start":694,"end":719},"file":25}],"1.45":[{"span":{"start":694,"end":719},"file":25}],"1.46":[{"span":{"start":694,"end":719},"file":25}],"1.47":[{"span":{"start":694,"end":719},"file":25}],"1.48":[{"span":{"start":694,"end":719},"file":25}],"1.49":[{"span":{"start":694,"end":719},"file":25}],"1.50":[{"span":{"start":694,"end":719},"file":25}],"1.51":[{"span":{"start":694,"end":719},"file":25}],"1.52":[{"span":{"start":694,"end":719},"file":25}],"1.53":[{"span":{"start":694,"end":719},"file":25}],"1.54":[{"span":{"start":694,"end":719},"file":25}],"1.55":[{"span":{"start":694,"end":719},"file":25}],"1.56":[{"span":{"start":694,"end":719},"file":25}],"1.57":[{"span":{"start":694,"end":719},"file":25}],"1.58":[{"span":{"start":694,"end":719},"file":25}],"1.59":[{"span":{"start":694,"end":719},"file":25}],"1.60":[{"span":{"start":694,"end":719},"file":25}],"1.61":[{"span":{"start":694,"end":719},"file":25}],"1.62":[{"span":{"start":694,"end":719},"file":25}],"1.63":[{"span":{"start":694,"end":719},"file":25}],"1.64":[{"span":{"start":694,"end":719},"file":25}],"1.65":[{"span":{"start":694,"end":719},"file":25}],"1.66":[{"span":{"start":694,"end":719},"file":25}],"1.67":[{"span":{"start":694,"end":719},"file":25}],"1.68":[{"span":{"start":694,"end":719},"file":25}],"1.69":[{"span":{"start":694,"end":719},"file":25}],"1.70":[{"span":{"start":694,"end":719},"file":25}],"1.71":[{"span":{"start":694,"end":719},"file":25}],"1.72":[{"span":{"start":694,"end":719},"file":25}],"1.73":[{"span":{"start":694,"end":719},"file":25}],"1.74":[{"span":{"start":694,"end":719},"file":25}],"1.75":[{"span":{"start":694,"end":719},"file":25}],"1.76":[{"span":{"start":694,"end":719},"file":25}],"1.77":[{"span":{"start":694,"end":719},"file":25}],"1.78":[{"span":{"start":694,"end":719},"file":25}],"1.79":[{"span":{"start":694,"end":719},"file":25}],"1.80":[{"span":{"start":694,"end":719},"file":25}],"1.81":[{"span":{"start":694,"end":719},"file":25}],"1.82":[{"span":{"start":694,"end":719},"file":25}],"1.83":[{"span":{"start":694,"end":719},"file":25}],"1.84":[{"span":{"start":694,"end":719},"file":25}],"1.85":[{"span":{"start":694,"end":719},"file":25}],"1.86":[{"span":{"start":694,"end":719},"file":25}],"1.87":[{"span":{"start":694,"end":719},"file":25}],"1.88":[{"span":{"start":694,"end":719},"file":25}],"1.89":[{"span":{"start":694,"end":719},"file":25}],"1.90":[{"span":{"start":694,"end":719},"file":25}],"1.91":[{"span":{"start":694,"end":719},"file":25}],"1.92":[{"span":{"start":694,"end":719},"file":25}],"1.93":[{"span":{"start":694,"end":719},"file":25}],"1.94":[{"span":{"start":694,"end":719},"file":25}],"1.95":[{"span":{"start":694,"end":719},"file":25}],"1.96":[{"span":{"start":694,"end":719},"file":25}],"1.97":[{"span":{"start":694,"end":719},"file":25}],"1.98":[{"span":{"start":694,"end":719},"file":25}],"1.99":[{"span":{"start":694,"end":719},"file":25}],"1.100":[{"span":{"start":694,"end":719},"file":25}],"1.101":[{"span":{"start":694,"end":719},"file":25}],"1.102":[{"span":{"start":694,"end":719},"file":25}],"1.103":[{"span":{"start":694,"end":719},"file":25}],"1.104":[{"span":{"start":694,"end":719},"file":25}],"1.105":[{"span":{"start":694,"end":719},"file":25}],"1.106":[{"span":{"start":694,"end":719},"file":25}],"1.107":[{"span":{"start":694,"end":719},"file":25}],"1.108":[{"span":{"start":694,"end":719},"file":25}],"1.109":[{"span":{"start":694,"end":719},"file":25}],"1.110":[{"span":{"start":694,"end":719},"file":25}],"1.111":[{"span":{"start":694,"end":719},"file":25}],"1.112":[{"span":{"start":694,"end":719},"file":25}],"1.113":[{"span":{"start":694,"end":719},"file":25}],"1.114":[{"span":{"start":694,"end":719},"file":25}],"1.115":[{"span":{"start":694,"end":719},"file":25}],"1.116":[{"span":{"start":694,"end":719},"file":25}],"1.117":[{"span":{"start":694,"end":719},"file":25}],"1.118":[{"span":{"start":694,"end":719},"file":25}],"1.119":[{"span":{"start":694,"end":719},"file":25}],"1.120":[{"span":{"start":694,"end":719},"file":25}],"1.121":[{"span":{"start":694,"end":719},"file":25}],"1.122":[{"span":{"start":694,"end":719},"file":25}],"1.123":[{"span":{"start":694,"end":719},"file":25}],"1.124":[{"span":{"start":694,"end":719},"file":25}],"1.125":[{"span":{"start":694,"end":719},"file":25}],"1.126":[{"span":{"start":694,"end":719},"file":25}],"1.127":[{"span":{"start":694,"end":719},"file":25}],"1.128":[{"span":{"start":694,"end":719},"file":25}],"1.129":[{"span":{"start":694,"end":719},"file":25}],"1.130":[{"span":{"start":694,"end":719},"file":25}],"1.131":[{"span":{"start":694,"end":719},"file":25}],"1.132":[{"span":{"start":694,"end":719},"file":25}],"1.133":[{"span":{"start":694,"end":719},"file":25}],"1.134":[{"span":{"start":694,"end":719},"file":25}],"1.135":[{"span":{"start":694,"end":719},"file":25}],"1.136":[{"span":{"start":694,"end":719},"file":25}],"1.137":[{"span":{"start":694,"end":719},"file":25}],"1.138":[{"span":{"start":694,"end":719},"file":25}],"1.139":[{"span":{"start":694,"end":719},"file":25}],"1.140":[{"span":{"start":694,"end":719},"file":25}],"1.141":[{"span":{"start":694,"end":719},"file":25}],"1.142":[{"span":{"start":694,"end":719},"file":25}],"1.143":[{"span":{"start":694,"end":719},"file":25}],"1.144":[{"span":{"start":694,"end":719},"file":25}],"1.145":[{"span":{"start":694,"end":719},"file":25}],"1.146":[{"span":{"start":694,"end":719},"file":25}],"1.147":[{"span":{"start":694,"end":719},"file":25}],"1.148":[{"span":{"start":694,"end":719},"file":25}],"1.149":[{"span":{"start":694,"end":719},"file":25}],"1.150":[{"span":{"start":694,"end":719},"file":25}],"1.151":[{"span":{"start":694,"end":719},"file":25}],"1.152":[{"span":{"start":694,"end":719},"file":25}],"1.153":[{"span":{"start":694,"end":719},"file":25}],"1.154":[{"span":{"start":694,"end":719},"file":25}],"1.155":[{"span":{"start":694,"end":719},"file":25}],"1.156":[{"span":{"start":694,"end":719},"file":25}],"1.157":[{"span":{"start":694,"end":719},"file":25}],"1.158":[{"span":{"start":694,"end":719},"file":25}],"1.159":[{"span":{"start":694,"end":719},"file":25}],"1.160":[{"span":{"start":694,"end":719},"file":25}],"1.161":[{"span":{"start":694,"end":719},"file":25}],"1.162":[{"span":{"start":694,"end":719},"file":25}],"1.163":[{"span":{"start":694,"end":719},"file":25}],"1.164":[{"span":{"start":694,"end":719},"file":25}],"1.165":[{"span":{"start":694,"end":719},"file":25}],"1.166":[{"span":{"start":694,"end":719},"file":25}],"1.167":[{"span":{"start":694,"end":719},"file":25}],"1.168":[{"span":{"start":694,"end":719},"file":25}],"1.169":[{"span":{"start":694,"end":719},"file":25}],"1.170":[{"span":{"start":694,"end":719},"file":25}],"1.171":[{"span":{"start":694,"end":719},"file":25}],"1.172":[{"span":{"start":694,"end":719},"file":25}],"1.173":[{"span":{"start":694,"end":719},"file":25}],"1.174":[{"span":{"start":694,"end":719},"file":25}],"1.175":[{"span":{"start":694,"end":719},"file":25}],"1.176":[{"span":{"start":694,"end":719},"file":25}],"1.177":[{"span":{"start":694,"end":719},"file":25}],"1.178":[{"span":{"start":694,"end":719},"file":25}],"1.179":[{"span":{"start":694,"end":719},"file":25}],"1.180":[{"span":{"start":694,"end":719},"file":25}],"1.181":[{"span":{"start":694,"end":719},"file":25}],"1.182":[{"span":{"start":694,"end":719},"file":25}],"1.183":[{"span":{"start":694,"end":719},"file":25}],"1.184":[{"span":{"start":694,"end":719},"file":25}],"1.185":[{"span":{"start":694,"end":719},"file":25}],"1.186":[{"span":{"start":694,"end":719},"file":25}],"1.187":[{"span":{"start":694,"end":719},"file":25}]}}],"file_map":{"0":{"source":"use dep::std;\n\npub fn from_module(x: Field, y: Field) -> Field {\n\tlet j = y.pow_32(4);\n\tstd::println(f\"j: {j}\");\n\tx + j\n}","path":"/root/noir/hello_world/src/new_module.nr"},"1":{"source":"use dep::std;\nmod new_module;\n//---------------------------------------------------\n// Basics\n// --------------------------------------------------\n\n// fn main(x: Field, y: pub Field) {\n//     assert(x != y);\n// }\n\n// #[test]\n// fn test_main() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     main(1, 4);\n// }\n\n// #[test]\n// fn test_fail() {\n//     main(1, 2);\n\n//     // Uncomment to make test fail\n//     main(1, 4);\n// }\n\n// fn add(x: u64, y: u64) -> u64 {\n//     x + y\n// }\n\n// #[test]\n// fn test_add() {\n//     assert(add(2, 2) == 4);\n//     assert(add(4, 2) == 6);\n//     assert(add(0, 1) == 1);\n//     assert(add(1, 2) == 3\n//     );\n// }\n\n// #[test(should_fail_with = \"Incorrect Number\")]\n// fn test_add_fail() {\n//     assert(add(2, 3) == 8, \"Incorrect Number\");\n// }\n\n// fn main(x: u8, y: u8){\n//     let z = x + y;\n// }\n\n// fn main() {\n//     let x: i8 = -118;\n//     let y: i8 = -11;\n//     std::wrapping_add(x , y);\n// }\n\n// fn main() {\n//     let t = true;\n//     let f: bool = false;\n// }\n\n//---------------------------------------------------\n// STRINGS\n// --------------------------------------------------\n\n\n// fn main(message: pub str<11>, hex_as_string: str<4>){\n//     std::println(message);\n//     assert(message == \"hello world\", \"String is not hello world\");\n//     assert(hex_as_string == \"0x41\", \"Hex is not 41\");\n// }\n\n\n// fn main() {\n//     let message = \"hello world \\nHow are you today\";\n//     let message_bytes = message.as_bytes();\n//     let mut message_vec = message.as_bytes_vec();\n//     std::println(message);\n//     std::println(message_bytes);\n//     // std::println(message_vec);\n//     assert(message_bytes.len() == 11);\n//     assert(message_bytes[0] == 104);\n//     assert(message_bytes[0] == message_vec.get(0));\n// }\n\n\n// fn main() {\n//     let s = r\"What's your name\";\n//     let s = r####\"One \"#, Two \"##, Three \"### Four \"####;\n\n//     let myString = r#\"Simon says \"hello world\"\"#;\n//     std::println(s);\n//     std::println(myString);\n// }\n\n\n//-----------------------\n// Arrays\n// ------------------------\n\n\n\n// fn main(x: bool, y: bool) {\n//     let my_arr = [x, y];\n//     let your_arr: [bool; 2] = [x, y];\n//     std::println(my_arr); // [0xff, 0x01]\n//     std::println(your_arr) // [0xff, 0x01]\n// }\n\n// fn main() {\n//     let mut arr = [1, 2, 3, 4, 5];\n//     assert(arr[0] == 1);\n\n//     arr[0] = 42;\n//     assert(arr[0] == 42);\n// }\n\n// fn main() {\n//     let mut arr: [Field; 32] = [1; 32];\n//     arr[20] = 10;\n//     arr[1] = 20;\n//     std::println(arr);\n//     let sl = arr.as_slice();\n//     std::println(sl)\n// }\n\n// fn main() {\n//     let mut arr: [Field; 31] = [1; 31];\n//     assert(arr.len() == 31);\n//     std::println(arr.len());\n//     let mut arr2 = [5, 3, 1, 5, 2, 1, 8, 8, 2, 15, 16];\n//     let sortedArr2 = arr2.sort();\n//     std::println(sortedArr2);\n//     let sortedArr3 = arr2.sort_via(|a, b| b < a);\n//     std::println(sortedArr3)\n// }\n\n\n// Sort Via\n// Does not work unless you cast the values\n// Location: https://noir-lang.org/docs/noir/syntax/data_types/arrays\n// fn main() {\n//     let arr4 = [42, 32];\n//     let sorted_ascending = arr4.sort_via(|a, b| a < b);\n//     assert(sorted_ascending == [32, 42]); // verifies\n\n//     let sorted_descending = arr4.sort_via(|a, b| a > b);\n//     assert(sorted_descending == [32, 42]); // does not verify\n// }\n\n// Map\n// fn main() {\n//     let a: [u8; 3] = [1, 2, 3];\n//     let b = a.map(|a| a * 4);\n//     std::println(b);\n// }\n\n\n// Fold\n// Does not work.\n// Location: https://noir-lang.org/docs/noir/syntax/data_types/arrays\n// fn main() {\n//      let arr = [2, 2, 2, 2, 2];\n//     let folded = arr.fold(0, |a, b| a + b);\n//     // assert(folded == 10);\n//     std::println(arr);\n\n// }\n\n// fn main() {\n//       let arr: [u8] = [2, 2, 2, 2, 2];\n//     let reduced = arr.reduce(|a, b| a + b);\n//     assert(reduced == 10);\n//     std::println(reduced)\n// }\n\nuse dep::std::collections::vec::Vec;\n\n// Vectors\n// fn main() {\n\n// let mut vector: Vec<Field> = Vec::new();\n// for i in 0..5 {\n//     vector.push(i);\n// }\n// std::println(vector);\n// assert(vector.len() == 5);\n// }\n\n// Tuples\n// fn main() {\n//     let newTupe: (u8, u8, Field) = (100, -100, 1000);\n//     let (first, second, _) = newTupe;\n//     std::println(first)   ;\n//     std::println(second) ;\n//     let another = newTupe.2;\n//     std::println(another)\n// }\n\n//Structs\n// struct Animal {\n//     hands: Field,\n//     legs: Field,\n//     eyes: u8,\n// }\n\n// fn main() {\n//     let legs = 4;\n\n//     let dog = Animal {\n//         eyes: 2,\n//         legs,\n//         hands: 4\n//     };\n//     let two = dog.eyes;\n//     std::println(two);\n//     let Animal {hands, legs: feet, eyes} = get_lion();\n//     std::println(hands);\n//     std::println(feet);\n//     std::println(eyes);\n// }\n//     fn get_lion() -> Animal {\n//         let lion = Animal {\n//             legs: 4,\n//             eyes: 2,\n//             hands: 2\n//         };\n//         lion\n//     }\n\n\n// References /Pointer\n// fn main() {\n//     let mut x = 2;\n//     let mut y = 4;\n//     multiplyBy2(&mut x);\n//     multiplyBy2(&mut y);\n//     std::println(x);\n//     std::println(y);\n// }\n\n// fn multiplyBy2(x: &mut u8){\n//     *x  = *x * 2;\n// }\n\n\n// Function Types\n// fn assert_returns_100(f: fn() -> Field){\n//     assert(f() == 100);\n// }\n\n// fn main() {\n//     assert_returns_100(|| 100);\n//     assert_returns_100(|| 150);\n// }\n\n// Methods\n\n// struct MyStruct {\n//     foo: Field,\n//     bar: Field,\n// }\n\n// impl MyStruct{\n//     fn new(foo: Field) -> MyStruct {\n//         MyStruct {\n//             foo,\n//             bar: 2,\n//         }\n//     }\n\n//     fn sum(self) -> Field {\n//         self.foo + self.bar\n//     }\n// }\n\n// fn main() {\n//     let s = MyStruct::new(40);\n//     assert(s.sum() == 42);\n// }\n\n\n// Lambdas\n// fn main() {\n// let add_50 = |a: u8| a + 50;\n// std::println(add_50(50))\n// }\n\n\n// Control Flow\n// fn main(){\n//     let arr = [4, 5, 8, 7, 1];\n//     let arrLength = arr.len();\n//     std::println(\"looping\");\n//     for i in 0 .. arrLength {\n//         // How do I cast it directly? Without creating a dummy variable\n\n//         let curr: u8 = arr[i];\n//         if(curr == 8){\n//         std::println(\"I am eight\");\n//         }\n//         else {\n//             std::println(\"I am not eight\")\n\n//         }\n//         std::println(curr);\n//     };\n//     std::println(\"Done\");\n// }\n\n// Converting u72 to [u8; 8]\n\n// fn main(num: u72) -> pub [u8; 8] {\n//     let mut out: [u8; 8] = [0; 8];\n//     for i in 0..8 {\n//         out[i] = (num >> (56 - (i * 8))) as u8;\n//     }\n//     std::println(out);\n//     out\n// }\n\n// unconstrained fn u72_to_u8(num: u72) -> [u8; 8] {\n//     let mut out: [u8; 8] = [0; 8];\n//     for i in 0..8 {\n//         out[i] = (num >> (56 - (i * 8))) as u8;\n//     }\n//     out\n// }\n\n// fn main() {\n//     let a: [u8; 8] = [255, 255, 255, 255, 255, 255, 255, 255];\n//      let mut reconstructed_num: u72 = 0;\n//     for i in 0..8 {\n//         reconstructed_num += (a[i] as u72 << (56 - (8 * i)));\n//     }\n//     std::println(reconstructed_num)\n// }\n\n\n// fn main() -> pub Field {\n//     let x = 3;\n//     // helper(x);\n//     x // x is still 3\n// }\n\n// fn helper(mut x: i32) {\n//     x = 4;\n// }\n\n\n//LAMBDAS\n\n// fn main() {\n//     let anotherVariable = 21;\n//     let coolFunction = || {\n//         let first = 44;\n//         let second = 2;\n//         (first * second) + anotherVariable as u8\n//     };\n\n//     std::println(coolFunction())\n\n// }\n\n// This fails. Closure issues\n// fn foo(f: fn () -> Field) -> Field {\n//  let result = f();\n//  result\n// }\n\n// fn main() {\n//   let (x, y) = (50, 50);\n//   assert(foo(|| x + y) == 100); // error :(\n// }\n\n\n// This solves closure issues\n// fn foo<Env>(f: fn[Env]() -> Field) -> Field {\n//  f()\n// }\n\n// fn main() {\n//   let (x, y) = (50, 50);\n//   assert(foo(|| x + y) == 100); // compiles fine\n//   assert(foo(|| 60) == 60);     // compiles fine\n// }\n\n\n// Testing nargo execute\n// fn main() -> pub [Field; 8] {\n//     let x = 5;\n//     let mut out: [Field; 8] = [0; 8];\n//     {\n//         let x = x * 2;\n//         assert (x == 10);\n//     }\n\n//     assert (x == 5);\n//     for i in 0..8 {\n//         out[i] = x + i;\n//     }\n//     out\n// }\n\n\nstruct Person {\n    age : u8,\n    height : u8,\n}\n\nstruct anotherStruct {\n    y: u8,\n    x: u8,\n}\n\nstruct fooStruct {\n    my_struct: anotherStruct,\n    foo: u8,\n}\n\n// fn main(age : u8, height : u8) {\n//     let person = Person { age : age, height : height };\n//     std::println(person);\n//     std::println(age + height);\n//     std::println(\"Hello world!\");\n\n//     let i: u8 = 24;\n//     let j: u8 = 22;\n//     let x: u8 = 4;\n//     let y: u8 =  2;\n//       let fmt_str = f\"i: {i}, j: {j}\";\n//   std::println(fmt_str);\n\n//   let s = anotherStruct { y: x, x: y };\n//   std::println(s);\n\n//   std::println(f\"i: {i}, s: {s}\");\n\n//   std::println(x);\n//   std::println([x, y]);\n\n//   let foo = fooStruct { my_struct: s, foo: 15 };\n//   std::println(f\"s: {s}, foo: {foo}\");\n\n//   std::println(15);       // prints 0x0f, implicit Field\n// //   std::println(-1 as u8); // prints 255\n//   std::println(-1 as i8); // prints -1\n\n\n//   let result = new_module::from_module(2, 4);\n//   std::println(f\"result: {result}\")\n// }\n\nfn main() -> pub u16 {\n  let result = new_module::from_module(2, 4) as u16;\n  std::println(f\"result: {result}\");\n  result\n}\n\n","path":"/root/noir/hello_world/src/main.nr"},"25":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\nmod ops;\nmod default;\nmod prelude;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(_with_newline: bool, _input: T) {}\n\nunconstrained pub fn print<T>(input: T) {\n    print_oracle(false, input);\n}\n\nunconstrained pub fn println<T>(input: T) {\n    print_oracle(true, input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(\n    _verification_key: [Field],\n    _proof: [Field],\n    _public_inputs: [Field],\n    _key_hash: Field,\n    _input_aggregation_object: [Field; N]\n) -> [Field; N] {}\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n","path":"std/lib.nr"}},"warnings":[{"Warning":{"ReturnConstant":{"call_stack":[{"span":{"start":9357,"end":9363},"file":1}]}}}]}